{
  "parameters": {
    "functionCode": "// Advanced Content Quality Check\n      const content = $json.message?.content;\n      const keywords = $json.keywords || [];\n\n      if (!content) {\n        return [{\n          json: {\n            error: 'Invalid content: Content is missing',\n            status: 'failed',\n            timestamp: new Date().toISOString()\n          }\n        }];\n      }\n\n      if (!Array.isArray(keywords) || keywords.length === 0) {\n        return [{\n          json: {\n            error: 'Invalid keywords: Keywords are missing or not an array',\n            status: 'failed',\n            timestamp: new Date().toISOString()\n          }\n        }];\n      }\n\n      // Function to check if content includes relevant keywords\n      function analyzeKeywords(text, keywords) {\n        const lowercaseText = text.toLowerCase();\n        return keywords.some(k => lowercaseText.includes(k.keyword?.toLowerCase()));\n      }\n\n      // Function to analyze sentiment based on positive and negative words\n      function analyzeSentiment(text) {\n        const positiveWords = ['success', 'innovation', 'growth', 'exciting', 'breakthrough'];\n        const negativeWords = ['failure', 'problem', 'issue', 'bad', 'wrong'];\n\n        const textLower = text.toLowerCase();\n        const positiveCount = positiveWords.filter(word => textLower.includes(word)).length;\n        const negativeCount = negativeWords.filter(word => textLower.includes(word)).length;\n\n        return positiveCount >= negativeCount;\n      }\n\n      // Function to validate content against multiple checks\n      function validateContent(text, keywords) {\n        try {\n          const checks = {\n            length: {\n              valid: text.length >= 50 && text.length <= 1000,\n              message: 'Content length must be between 50 and 1000 characters'\n            },\n            hasHashtags: {\n              valid: (text.match(/#[a-zA-Z0-9]+/g) || []).length >= 2,\n              message: 'Content must include at least 2 hashtags'\n            },\n            isRelevant: {\n              valid: analyzeKeywords(text, keywords),\n              message: 'Content must include relevant keywords'\n            },\n            sentiment: {\n              valid: analyzeSentiment(text),\n              message: 'Content sentiment should be positive'\n            },\n            structure: {\n              valid: text.split('\\\\n').length >= 2,\n              message: 'Content should have proper structure with line breaks'\n            }\n          };\n\n          const validationResults = Object.entries(checks).map(([key, value]) => ({\n            check: key,\n            valid: value.valid,\n            message: value.message\n          }));\n\n          const isValid = validationResults.every(result => result.valid);\n          const qualityScore = validationResults.filter(result => result.valid).length / validationResults.length;\n\n          return {\n            isValid,\n            qualityScore: qualityScore.toFixed(2),\n            details: validationResults,\n            timestamp: new Date().toISOString()\n          };\n        } catch (error) {\n          console.error('Validation error:', error);\n          return {\n            isValid: false,\n            qualityScore: 0,\n            error: error.message\n          };\n        }\n      }\n\n      // Perform validation\n      const validationResult = validateContent(content, keywords);\n\n      if (!validationResult.isValid) {\n        return [{\n          json: {\n            error: 'Content validation failed',\n            details: validationResult.details,\n            status: 'failed',\n            timestamp: validationResult.timestamp\n          }\n        }];\n      }\n\n      // Return success response\n      return [{\n        json: {\n          content,\n          quality_score: validationResult.qualityScore,\n          validation_details: validationResult.details,\n          status: 'success',\n          timestamp: validationResult.timestamp\n        }\n      }];"
  },
  "name": "Content Validation",
  "type": "n8n-nodes-base.function",
  "typeVersion": 1,
  "position": [850, 340]
}